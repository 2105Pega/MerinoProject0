package com.revature.services;
import com.revature.accounts.*;

public class tServices {
	
	public static String withdraw(double amount, Account account) {
		if (account.getApproved() == "Pending") {
			return "The account is pending approval. No withdrawals allowed until the account is approved.";
		} else if (account.getApproved() == "Cancelled") {
			return "This account has been cancelled. Please talk to a local teller.";
		}
		if (account.getBalance() > amount) {
			if (amount > 0) {
				double oldBalance = account.getBalance();
				double newBalance = oldBalance - amount;
				account.setBalance(newBalance);
				return "Account [" + account.getAccountNumber() + "] had an account balance of " + oldBalance + " and a withdrawal of " + amount + " was made. The new balance is: " + account.getBalance() + ".";
			} else {
				return "You should withdraw an amount bigger than 0.";
			}
		} else {
			return "Insuficient funds to make this withdrawal. Transaction canceled.";
		}
	}
	
	public static String deposit(double amount, Account account) {
		if (account.getApproved() == "Pending") {
			return "The account is pending approval. No deposits allowed until the account is approved.";
		} else if (account.getApproved() == "Cancelled") {
			return "This account has been cancelled. Please talk to a local teller.";
		}
		if (amount > 0) {
			double oldBalance = account.getBalance();
			double newBalance = oldBalance + amount;
			account.setBalance(newBalance);
			return "Account [" + account.getAccountNumber() + "] had an account balance of " + oldBalance + " and a deposit of " + amount + " was made. The new balance is: " + account.getBalance() + ".";
		} else {
			return "You should deposit an amount bigger than 0.";
		}
	}
	
	public static String transfer(double amount, Account sender, Account receiver) {
		if (amount <= 0) {
			return "The transfer amount should be bigger than 0.";
		} else if (sender == receiver) {
			return "You cannot transfer funds between the same account. Please choose to withdraw or deposit as necessary.";
		} else {
			if (sender.getBalance() < amount) {
				return "Insufficient funds to carry the transaction";
			} else if (sender.getApproved() == "Pending") {
				return "The account is pending approval. No transfers allowed until the account is approved.";
			} else if (sender.getApproved() == "Cancelled") {
				return "This account has been cancelled. Please talk to a local teller.";
			} else if (receiver.getApproved() == "Pending" || receiver.getApproved() == "Cancelled") {
				return "The recepient account is unable to receive transfers at the moment. Please speak to your recepient.";
			}
			if (sender.getApproved() == "Approved" && receiver.getApproved() == "Approved") {
				String deposit = tServices.deposit(amount, receiver);
				String withdrawl = tServices.withdraw(amount, sender);
				return withdrawl + " The withdrawn amount was transferred to account [" + receiver.getAccountNumber() + "] and should be available immediately.";
			}
		}
	}
}
