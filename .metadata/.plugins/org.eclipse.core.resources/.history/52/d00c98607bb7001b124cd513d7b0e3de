package bankingApp;
import org.junit.jupiter.api.*;
import com.revature.users.*;
import com.revature.accounts.*;
import com.revature.services.CustomerService;
import com.revature.services.EmployeeService;
import com.revature.services.UserListService;
import com.revature.services.UserService;
import com.revature.services.tServices;

public class testBankingApp {
	
	
	@Test
	public void testAddAccount() {
		UserList ul = UserList.getInstance();
		Customer c = new Customer("user", "pass", "Luis", "Merino");
		Account a = new Account(ul, 19, "checking", c);
		Assertions.assertEquals(a, c.getAccount(0));
	}
	@Test
	public void testCustomerList() {
		UserList ul = UserList.getInstance();
		Customer d = new Customer("user2", "pass", "Luis", "Merino");
		Customer f = new Customer("user3", "pass", "Luis", "Merino");
		Account b = new Account(ul, 27.00, "saving", d, f);
		
		
		Assertions.assertEquals(d, b.getCustomer(0));
		Assertions.assertEquals(f, b.getCustomer(1));
	}
	@Test
	public void testUserList() {
		UserList myList = UserList.getInstance();
		UserList myOtherList = UserList.getInstance();
		Assertions.assertEquals(myList, myOtherList);
		Assertions.assertEquals(myList.getCusList(), myOtherList.getCusList());
	}
	
	@Test
	public void testWithdrawPending() {
		UserList ul = UserList.getInstance();
		Customer u = new Customer("user4", "pass", "Luis", "Merino");
		Account c = new Account(ul, 20.00, "checking",  u);
		System.out.println(tServices.withdraw(19, c));
		Assertions.assertEquals(20, c.getBalance());
		Assertions.assertEquals("Pending", c.getApproved());
	}
	
	@Test
	public void testWithdraw() {
		UserList ul = UserList.getInstance();
		Customer u = new Customer("user4", "pass", "Luis", "Merino");
		Account c = new Account(ul, 20.00, "checking",  u);
		c.setApproved("Approved");
		System.out.println(tServices.withdraw(19, c));
		System.out.println(tServices.withdraw(2, c));
		System.out.println(tServices.withdraw(0, c));
		Assertions.assertEquals(1, c.getBalance());
		
	}
	@Test
	public void testDepositPending() {
		UserList ul = UserList.getInstance();
		Customer u = new Customer("user4", "pass", "Luis", "Merino");
		Account c = new Account(ul, 20.00, "checking",  u);
		System.out.println(tServices.deposit(19, c));
		Assertions.assertEquals(20, c.getBalance());
		Assertions.assertEquals("Pending", c.getApproved());
	}
	
	@Test
	public void testdeposit() {
		UserList ul = UserList.getInstance();
		Customer u = new Customer("user4", "pass", "Luis", "Merino");
		Account c = new Account(ul, 20.00, "checking",  u);
		c.setApproved("Approved");
		System.out.println(tServices.deposit(19, c));
		System.out.println(tServices.deposit(2, c));
		System.out.println(tServices.deposit(0, c));
		Assertions.assertEquals(41, c.getBalance());
		
	}
	@Test
	public void testTransferPending() {
		UserList ul = UserList.getInstance();
		Customer c = new Customer("user4", "pass", "Luis", "Merino");
		Account a = new Account(ul, 20.00, "checking",  c);
		Account b = new Account(ul, 20.00, "saving",  c);
		System.out.println(tServices.transfer(10, a, b));
		Assertions.assertEquals(20, a.getBalance());
		Assertions.assertEquals(20, b.getBalance());
		
	}
	@Test
	public void testTransferCancelled() {
		UserList ul = UserList.getInstance();
		Customer c = new Customer("user4", "pass", "Luis", "Merino");
		Account a = new Account(ul, 20.00, "checking",  c);
		Account b = new Account(ul, 20.00, "saving",  c);
		a.setApproved("Cancelled");
		System.out.println(tServices.transfer(10, a, b));
		Assertions.assertEquals(20, a.getBalance());
		Assertions.assertEquals(20, b.getBalance());
		
	}
	@Test
	public void testTransferSame() {
		UserList ul = UserList.getInstance();
		Customer c = new Customer("user4", "pass", "Luis", "Merino");
		Account a = new Account(ul, 20.00, "checking",  c);
		Account b = new Account(ul, 20.00, "saving",  c);
		System.out.println(tServices.transfer(10, a, a));
		Assertions.assertEquals(20, a.getBalance());
		Assertions.assertEquals(20, b.getBalance());
		
	}
	@Test
	public void testTransfer() {
		UserList ul = UserList.getInstance();
		Customer c = new Customer("user4", "pass", "Luis", "Merino");
		Account a = new Account(ul, 20.00, "checking",  c);
		Account b = new Account(ul, 20.00, "saving",  c);
		a.setApproved("Approved");
		b.setApproved("Approved");
		System.out.println(tServices.transfer(10, a, b));
		Assertions.assertEquals(10, a.getBalance());
		Assertions.assertEquals(30, b.getBalance());
		
	}
	

	
	
	@Test
	public void testListAccounts() {
		UserList ul = UserList.getInstance();
		Customer c = new Customer("user4", "pass", "Pablo", "Merino");
		new Account(ul, 20.00, "checking",  c);
		new Account(ul, 20.00, "saving",  c);
		CustomerService.listAccounts(c);
		
	}
	@Test
	public void testFindCustomer() {
		UserList ul = UserList.getInstance();
		Customer c = new Customer("user100", "pass", "Pablo", "Merino");
		ul.addCustomer(c);
		
		Assertions.assertEquals(c, UserService.findCustomer(ul, "user100"));	
		
	}
	@Test
	public void testFindCustomerNull() {
		UserList ul = UserList.getInstance();
		Assertions.assertEquals(null, UserService.findCustomer(ul, "impossible"));
	}
	@Test
	public void testFindEmployee() {
		UserList ul = UserList.getInstance();
		Employee e = new Employee("emp100", "pass", "pablo", "morejon");
		ul.addEmployee(e);
		
		Assertions.assertEquals(e, UserService.findEmployee(ul, "emp100"));
	}
	@Test
	public void testFindEmployeeNull() {
		UserList ul = UserList.getInstance();
		
		Assertions.assertEquals(null, UserService.findEmployee(ul, "impossible2"));
	}
	@Test
	public void testFindAccount() {
		UserList ul = UserList.getInstance();
		Customer c = new Customer("user4", "pass", "Pablo", "Merino");
		ul.addCustomer(c);
		Account a = new Account(ul, 20.00, "checking",  c);
		Assertions.assertEquals(a, UserListService.findAccount(ul, a.getAccountNumber()));
	}
	@Test
	public void testFindAccountNull() {
		UserList ul = UserList.getInstance();
		Customer c = new Customer("user4", "pass", "Pablo", "Merino");
		ul.addCustomer(c);
		new Account(ul, 20.00, "checking",  c);
		Assertions.assertEquals(null, UserListService.findAccount(ul, 123));
	}
	
	@Test
	public void testRejectAccountApproved() {
		UserList ul = UserList.getInstance();
		Customer cus = new Customer("user1000", "pass", "Pablo", "piddy");
		Account a = new Account(ul, 20.00, "checking",  cus);
		Employee e = new Employee("emp105", "pass", "pablo", "morejon");
		EmployeeService.approveAccount(e, a, ul);
		EmployeeService.rejectAccount(e, a, ul);
		
		
		Assertions.assertEquals("Approved", a.getApproved());
	}
	@Test
	public void testPendingAccounts() {
		UserList ul = UserList.getInstance();
		Customer cus = new Customer("user1000", "pass", "Pablo", "piddy");
		new Account(ul, 20.00, "checking",  cus);
		
		Assertions.assertEquals(1, EmployeeService.pendingAccounts(cus));
	}
	
}
